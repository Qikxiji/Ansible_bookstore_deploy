---

########## NGINX VM ########## 

- name: Configure VM 102 with nginx+php-fpm
  hosts: vm102-nginx-php-pfm
  tags: nginx
  vars_files:
    - vars/my_vars.yml
    - vars/secrets.yml
  become: true

  handlers:
  - name: Restart nginx
    service:
      name: nginx
      state: restarted
  
  - name: Restart php-pfm
    service:
      name: php{{ php_fpm_version }}-fpm.service
      state: restarted
  
  - name: apply netplan configuration
    command:
      cmd: netplan apply


  tasks:
  - name: Change network config
    template: 
      src: files/netconf/10-netplan-nginx.yaml.j2
      dest: /etc/netplan/10-netplan-nginx.yaml
    notify: apply netplan configuration
    tags: network

  - name: Install nginx and php-fpm
    apt:
      pkg:
      - nginx
      - php
      - php-mysql
      - php-mbstring
      - php-zip
      - php-gd
      - php-curl
      - php-xml
      - php-fpm
      update_cache: true
      cache_valid_time: 86400

  - name: Remove cache
    command:
      cmd: rm -rf /var/lib/{apt,dpkg,cache,log}/

##### COPY WEBSITE SOURCES START #####

  - name: Copy website regular files
    copy: 
      src: files/bookstore
      dest: "{{ website_dir }}"

  - name: Copy website templates
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    loop:
      - src: files/bookstore_j2/checkout.php.j2
        dest: "{{ website_dir }}bookstore/checkout.php"

      - src: files/bookstore_j2/connectDB.php.j2
        dest: "{{ website_dir }}bookstore/connectDB.php"

      - src: files/bookstore_j2/edituser.php.j2
        dest:  "{{ website_dir }}bookstore/edituser.php"

      - src: files/bookstore_j2/index.php.j2
        dest: "{{ website_dir }}bookstore/index.php"

      - src: files/bookstore_j2/register.php.j2
        dest: "{{ website_dir }}bookstore/register.php"

##### COPY WEBSITE SOURCES END #####

##### COPY NGIXN & PHP-FPM #####

  - name: Remove nginx/sites-enabled default config file
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent
    notify:
      - Restart nginx
  
  - name: Remove fpm/pool.d/www.conf default config file
    file:
      path: /etc/php/{{ php_fpm_version }}/fpm/pool.d/www.conf
      state: absent
    notify:
      - Restart php-pfm

  - name: Copy nginx.conf
    copy: 
      src: files/nginx/nginx.conf
      dest: /etc/nginx/nginx.conf
    notify:
      - Restart nginx

  - name: Copy www.conf & sites enabled file
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    loop:
      - src: files/nginx/www.conf.j2
        dest: /etc/php/{{ php_fpm_version }}/fpm/pool.d/bookstore.conf

      - src: files/nginx/php_site.conf.j2
        dest: /etc/nginx/conf.d/php-website.conf
    notify:
      - Restart nginx
      - Restart php-pfm

##### COPY NGIXN & PHP-FPM END #####

########## MYSQL VM ########## 

- name: Configure VM with mysql
  hosts: vm103-mysql
  tags: mysql
  vars_files:
    - vars/my_vars.yml
    - vars/secrets.yml    
  become: true

  handlers:
  - name: Restart mysql
    service:
      name: mysql.service
      state: restarted
  
  - name: apply netplan configuration
    command:
      cmd: netplan apply

  tasks:
  - name: Change network config
    template: 
      src: files/netconf/10-netplan-mysql.yaml.j2
      dest: /etc/netplan/10-netplan-mysql.yaml
    notify: apply netplan configuration


  - name: install mysql & python3 & python3-pip
    apt:
      pkg:
      - mysql-server
      - python3
      - python3-pip
      - python3-pymysql
      update_cache: true
      cache_valid_time: 86400
    notify:
      - Restart mysql


  - name: Copy mysqld.cnf (bind ip add)
    template: 
      src: files/db/mysqld.cnf.j2
      dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    notify:
      - Restart mysql
  

  - name: Copy db dump
    copy: 
      src: files/db/database.sql
      dest: "{{ db_dump_location }}"


#  - name: Add password to root user
 #   mysql_user:
  #    name: root
   #   host: localhost
    #  password: "{{ root_password }}"
     # state: present
      #login_unix_socket: "{{ mysql_socket }}"


  - name: Create user {{ mysql_user }}
    mysql_user:
      login_user: root
      login_password: "{{ root_password }}"
      login_unix_socket: "{{ mysql_socket }}"
      host: "{{ vm102_mysql_ip }}"
      name: "{{ mysql_user }}"
      password: "{{ db_password }}"
      priv: '*.*:ALL'
      state: present
    tags: sec


  - name: Restore database
    mysql_db:
      login_user: root
      login_password: "{{ root_password }}"
      login_unix_socket: "{{ mysql_socket }}"
      name: bookstore
      state: import
      target: "{{ db_dump_location }}"

########## MYSQL VM END ########## 

  
